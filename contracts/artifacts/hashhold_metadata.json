{
	"compiler": {
		"version": "0.8.26+commit.8a97fa7a"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_pyth",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "quoterV2Address",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "_saucerSwapV2RouterAddress",
						"type": "address"
					},
					{
						"internalType": "bytes32",
						"name": "_hbarUsdPriceId",
						"type": "bytes32"
					}
				],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"inputs": [],
				"name": "ReentrancyGuardReentrantCall",
				"type": "error"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "user",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "stakeIndex",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "boostAmount",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "newRewardPercent",
						"type": "uint256"
					}
				],
				"name": "BoostUsed",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "bool",
						"name": "",
						"type": "bool"
					},
					{
						"indexed": false,
						"internalType": "bytes",
						"name": "",
						"type": "bytes"
					}
				],
				"name": "CallResponseEvent",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "epochId",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "totalReward",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "totalRewardShares",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "rewardPerShare",
						"type": "uint256"
					}
				],
				"name": "EpochFinalized",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "epochId",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "startTime",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "endTime",
						"type": "uint256"
					}
				],
				"name": "EpochStarted",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "user",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "totalReward",
						"type": "uint256"
					}
				],
				"name": "RewardClaimed",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "user",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "startTime",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "endTime",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "stakeIndex",
						"type": "uint256"
					}
				],
				"name": "Staked",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "address",
						"name": "tokenId",
						"type": "address"
					}
				],
				"name": "TokenAssociated",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "user",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "stakeIndex",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "bool",
						"name": "early",
						"type": "bool"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "penalty",
						"type": "uint256"
					}
				],
				"name": "Withdrawn",
				"type": "event"
			},
			{
				"stateMutability": "payable",
				"type": "fallback"
			},
			{
				"inputs": [],
				"name": "claimReward",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					},
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"name": "epochClaimed",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "epochDuration",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "epochId",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"name": "epochs",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "startTime",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "endTime",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "totalReward",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "totalRewardShares",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "rewardPerShare",
						"type": "uint256"
					},
					{
						"internalType": "bool",
						"name": "finalized",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "hbarUsdPriceId",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "maxStakeDuration",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "minStakeDuration",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "owner",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "penaltyRate",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "pyth",
				"outputs": [
					{
						"internalType": "contract IPyth",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "quoterV2",
				"outputs": [
					{
						"internalType": "contract IQuoterV2",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "token",
						"type": "address"
					},
					{
						"internalType": "bytes",
						"name": "encodedFunctionSelector",
						"type": "bytes"
					}
				],
				"name": "redirectForToken",
				"outputs": [
					{
						"internalType": "int256",
						"name": "responseCode",
						"type": "int256"
					},
					{
						"internalType": "bytes",
						"name": "response",
						"type": "bytes"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "saucerSwapV2Router",
				"outputs": [
					{
						"internalType": "contract ISaucerSwapV2Router",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "saucerSwapV2RouterAddress",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_epochDuration",
						"type": "uint256"
					}
				],
				"name": "setEpochDuration",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "_priceId",
						"type": "bytes32"
					}
				],
				"name": "setHbarUsdPriceId",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_penaltyRate",
						"type": "uint256"
					}
				],
				"name": "setPenaltyRate",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_pyth",
						"type": "address"
					}
				],
				"name": "setPyth",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_quoterV2",
						"type": "address"
					}
				],
				"name": "setQuoterV2",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_router",
						"type": "address"
					}
				],
				"name": "setSaucerSwapV2Router",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_min",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "_max",
						"type": "uint256"
					}
				],
				"name": "setStakeDurationBounds",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "tokenId",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "duration",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "boostTokenAmount",
						"type": "uint256"
					},
					{
						"internalType": "bytes[]",
						"name": "priceUpdate",
						"type": "bytes[]"
					}
				],
				"name": "stake",
				"outputs": [],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "tokenId",
						"type": "address"
					}
				],
				"name": "tokenAssociate",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"name": "totalStaked",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "token",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "from",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "transferFrom",
				"outputs": [
					{
						"internalType": "int64",
						"name": "responseCode",
						"type": "int64"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "token",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "from",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "serialNumber",
						"type": "uint256"
					}
				],
				"name": "transferFromNFT",
				"outputs": [
					{
						"internalType": "int64",
						"name": "responseCode",
						"type": "int64"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"name": "userStakes",
				"outputs": [
					{
						"internalType": "address",
						"name": "tokenId",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "startTime",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "endTime",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "rewardShares",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "nextToClaim",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "stakeIndex",
						"type": "uint256"
					}
				],
				"name": "withdraw",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"stateMutability": "payable",
				"type": "receive"
			}
		],
		"devdoc": {
			"details": "Time-locked staking contract on Hedera. Demonstration only, not for production use.",
			"errors": {
				"ReentrancyGuardReentrantCall()": [
					{
						"details": "Unauthorized reentrant call."
					}
				]
			},
			"kind": "dev",
			"methods": {
				"redirectForToken(address,bytes)": {
					"params": {
						"encodedFunctionSelector": "The function selector from the ERC20 interface + the bytes input for the function called",
						"token": "The token address"
					},
					"returns": {
						"response": "The result of the call that had been encoded and sent for execution.",
						"responseCode": "The response code for the status of the request. SUCCESS is 22."
					}
				},
				"stake(address,uint256,uint256,uint256,bytes[])": {
					"params": {
						"amount": "Amount of tokens to stake.",
						"boostTokenAmount": "Additional tokens to burn for a reward boost.",
						"duration": "Duration for which tokens are locked.",
						"priceUpdate": "Pyth price feed updates.",
						"tokenId": "The token being staked (0x0 for HBAR)."
					}
				},
				"tokenAssociate(address)": {
					"params": {
						"tokenId": "The token address to associate with."
					}
				},
				"transferFrom(address,address,address,uint256)": {
					"params": {
						"amount": "The amount of tokens to transfer from `from` to `to`",
						"from": "The account address of the owner of the token, on the behalf of which to transfer `amount` tokens",
						"to": "The account address of the receiver of the `amount` tokens",
						"token": "The address of the fungible Hedera token to transfer"
					},
					"returns": {
						"responseCode": "The response code for the status of the request. SUCCESS is 22."
					}
				},
				"transferFromNFT(address,address,address,uint256)": {
					"params": {
						"from": "The account address of the owner of `serialNumber` of `token`",
						"serialNumber": "The NFT serial number to transfer",
						"to": "The account address of the receiver of `serialNumber`",
						"token": "The address of the non-fungible Hedera token to transfer"
					},
					"returns": {
						"responseCode": "The response code for the status of the request. SUCCESS is 22."
					}
				},
				"withdraw(uint256)": {
					"params": {
						"stakeIndex": "Index of the user's stake to withdraw."
					}
				}
			},
			"title": "HashHold",
			"version": 1
		},
		"userdoc": {
			"events": {
				"CallResponseEvent(bool,bytes)": {
					"notice": "Generic event"
				}
			},
			"kind": "user",
			"methods": {
				"claimReward()": {
					"notice": "Claims all available rewards from finalized epochs."
				},
				"redirectForToken(address,bytes)": {
					"notice": "Redirect for token"
				},
				"setEpochDuration(uint256)": {
					"notice": "Change the epoch duration (e.g., 1 hours → 2 hours)."
				},
				"setHbarUsdPriceId(bytes32)": {
					"notice": "Update the Pyth HBAR/USD price feed ID."
				},
				"setPenaltyRate(uint256)": {
					"notice": "Update the penalty rate (0 - 100)."
				},
				"setPyth(address)": {
					"notice": "Update the Pyth price feed contract."
				},
				"setQuoterV2(address)": {
					"notice": "Update the quoter contract address."
				},
				"setSaucerSwapV2Router(address)": {
					"notice": "Update the SaucerSwap V3 router address."
				},
				"setStakeDurationBounds(uint256,uint256)": {
					"notice": "Update min/max stake durations."
				},
				"stake(address,uint256,uint256,uint256,bytes[])": {
					"notice": "Stake tokens or HBAR into the current epoch."
				},
				"tokenAssociate(address)": {
					"notice": "Associates this contract with a given HTS token."
				},
				"transferFrom(address,address,address,uint256)": {
					"notice": "Only applicable to fungible tokens"
				},
				"transferFromNFT(address,address,address,uint256)": {
					"notice": "Transfers `serialNumber` of `token` from `from` to `to` using the allowance mechanism. Only applicable to NFT tokens"
				},
				"withdraw(uint256)": {
					"notice": "Withdraw staked tokens. If withdrawn early, a penalty applies."
				}
			},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"contracts/hashhold.sol": "hashhold"
		},
		"evmVersion": "cancun",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"@openzeppelin/contracts/utils/Panic.sol": {
			"keccak256": "0xf7fe324703a64fc51702311dc51562d5cb1497734f074e4f483bfb6717572d7a",
			"license": "MIT",
			"urls": [
				"bzz-raw://c6a5ff4f9fd8649b7ee20800b7fa387d3465bd77cf20c2d1068cd5c98e1ed57a",
				"dweb:/ipfs/QmVSaVJf9FXFhdYEYeCEfjMVHrxDh5qL4CGkxdMWpQCrqG"
			]
		},
		"@openzeppelin/contracts/utils/ReentrancyGuard.sol": {
			"keccak256": "0x11a5a79827df29e915a12740caf62fe21ebe27c08c9ae3e09abe9ee3ba3866d3",
			"license": "MIT",
			"urls": [
				"bzz-raw://3cf0c69ab827e3251db9ee6a50647d62c90ba580a4d7bbff21f2bea39e7b2f4a",
				"dweb:/ipfs/QmZiKwtKU1SBX4RGfQtY7PZfiapbbu6SZ9vizGQD9UHjRA"
			]
		},
		"@openzeppelin/contracts/utils/math/Math.sol": {
			"keccak256": "0xa00be322d7db5786750ce0ac7e2f5b633ac30a5ed5fa1ced1e74acfc19acecea",
			"license": "MIT",
			"urls": [
				"bzz-raw://6c84e822f87cbdc4082533b626667b6928715bb2b1e8e7eb96954cebb9e38c8d",
				"dweb:/ipfs/QmZmy9dgxLTerBAQDuuHqbL6EpgRxddqgv5KmwpXYVbKz1"
			]
		},
		"@openzeppelin/contracts/utils/math/SafeCast.sol": {
			"keccak256": "0x195533c86d0ef72bcc06456a4f66a9b941f38eb403739b00f21fd7c1abd1ae54",
			"license": "MIT",
			"urls": [
				"bzz-raw://b1d578337048cad08c1c03041cca5978eff5428aa130c781b271ad9e5566e1f8",
				"dweb:/ipfs/QmPFKL2r9CBsMwmUqqdcFPfHZB2qcs9g1HDrPxzWSxomvy"
			]
		},
		"@pythnetwork/pyth-sdk-solidity/IPyth.sol": {
			"keccak256": "0x217532ece69b8e472a6260b740c34aebfb5a299bbfed6392cf0458ed368be7ab",
			"license": "Apache-2.0",
			"urls": [
				"bzz-raw://02d1b71006ccdfd6402a2b72ea197babbd1b54c26a70ebb76a114f0ae8352f08",
				"dweb:/ipfs/QmbqfuvwriG3AEwYEwupUaQKgfxRYK6Qui99o6wQysPoP3"
			]
		},
		"@pythnetwork/pyth-sdk-solidity/IPythEvents.sol": {
			"keccak256": "0x7ca8e03315d4516d6833c425a52c43e8cacf2077492074d2d36ae5c17899c9c8",
			"license": "Apache-2.0",
			"urls": [
				"bzz-raw://ad1c69d157eccb09ce248e1ec021f2e58b61dd36160f5be3973a7bea4a899f64",
				"dweb:/ipfs/QmW1yXsDrMsuQKxtZanSZXpyUW2QwnCKVoCjS5fC3NoSVY"
			]
		},
		"@pythnetwork/pyth-sdk-solidity/PythStructs.sol": {
			"keccak256": "0xade221177dda98ebd194c363f264ceea125bde0e6a7a72f7b54da3ac60316894",
			"license": "Apache-2.0",
			"urls": [
				"bzz-raw://a404dbbc64183995326c345cae27601d37c783b3d9030c8dc0ab4943fa2bf1da",
				"dweb:/ipfs/QmfNFesQffYisafmJFbKHxVFSD8fY49X1z9f8N7qtfW8AX"
			]
		},
		"contracts/hashhold.sol": {
			"keccak256": "0xa7b2dd3ddbf24dedeb36c4fe9946fec051a1d3e042ed0db43fb9f1f4eadd9a57",
			"license": "GPL-3.0",
			"urls": [
				"bzz-raw://e877137bf71c0cc889d62c1a3e2db8cbad7b5f890888126760fcce1ab52e39ec",
				"dweb:/ipfs/QmZbPTmfyti4crJQ6zkW2SNTPJ7SGHUc8MfzCdQNKGrU7i"
			]
		},
		"contracts/hedera/HederaResponseCodes.sol": {
			"keccak256": "0x8fb241071e3f99ca11181dcd07ec7934ac40c8b4d9c31428be5478e0697a4435",
			"license": "Apache-2.0",
			"urls": [
				"bzz-raw://9254e95fe31e42419d4ff79ecbe0bf5453d9052b232d5adb013ef1bab6d67612",
				"dweb:/ipfs/QmdA7Ne6taK2pXkcDTK6Fr51BZBKqoukTVvFSqwkieAPCv"
			]
		},
		"contracts/hedera/HederaTokenService.sol": {
			"keccak256": "0x445622ef2a2bd167b17a5149f5da605ee31b2d96baca8522518345bd62184d81",
			"license": "Apache-2.0",
			"urls": [
				"bzz-raw://b2f093320549abd1d729bad334f990f6047cb8db62596a94ab7afd76b6d4eea4",
				"dweb:/ipfs/QmbHKTGcmjSRkrkWR9NGsFhrHkg4JEcUn1sU7BUKVWed33"
			]
		},
		"contracts/hedera/IHederaTokenService.sol": {
			"keccak256": "0x92046c50214fde51d8106e8eb4323f97d639317a13e61db318206c06816cd34d",
			"license": "Apache-2.0",
			"urls": [
				"bzz-raw://60051e2271f2d0063ce26759b56d2b1d80b2758e19859958f2f71b2140511591",
				"dweb:/ipfs/QmNbYSbTY7qEEkmyN2rh5UfAc4sXSdpSJKFDgWvN526FeB"
			]
		}
	},
	"version": 1
}